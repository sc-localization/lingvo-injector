name: Check PR

on:
  pull_request:
    branches: [main]

jobs:
  check-changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
      ci: ${{ steps.filter.outputs.ci }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            code:
              - 'src/**'
              - 'src-tauri/**'
              - 'package.json'
            docs:
              - 'docs/**'
              - '*.md'
            ci:
              - '.github/**'

  lint-and-format-check:
    name: Lint & Format
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.code == 'true' }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: '20'
          platform: ubuntu-latest

      - name: Run ESLint
        run: npm run lint
        shell: bash

  tauri-build-check:
    name: Build App
    needs: [check-changes, lint-and-format-check]
    if: ${{ needs.check-changes.outputs.code == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: '20'
          platform: ${{ matrix.platform }}

      - name: Run Tauri Build Check
        run: npm run tauri:build:dev
        shell: bash

      - name: Upload Combined Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build-zip
          path: src-tauri/target/release/bundle/
          compression-level: 9

  docs-check:
    name: Docs Check
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.docs == 'true' && needs.check-changes.outputs.code != 'true' }}
    steps:
      - uses: actions/checkout@v5
      - name: Pass Docs Check
        run: echo "Documentation changes detected, passing check"
        shell: bash

  ci-check:
    name: CI Check
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.ci == 'true' && needs.check-changes.outputs.code != 'true' && needs.check-changes.outputs.docs != 'true' }}
    steps:
      - uses: actions/checkout@v5
      - name: Pass CI Check
        run: echo "CI changes detected, passing check"
        shell: bash

  status-check:
    name: PR Final Status
    needs: [check-changes, lint-and-format-check, tauri-build-check]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Set Workflow Status
        run: |
          echo "Code changes: ${{ needs.check-changes.outputs.code }}"
          echo "Docs changes: ${{ needs.check-changes.outputs.docs }}"
          echo "Lint result: ${{ needs.lint-and-format-check.result }}"
          echo "Build result: ${{ needs.tauri-build-check.result }}"
          if [ "${{ needs.check-changes.outputs.code }}" != "true" ]; then
            echo "No code changes detected, setting workflow status to success"
            exit 0
          else
            lint_result="${{ needs.lint-and-format-check.result }}"
            build_result="${{ needs.tauri-build-check.result }}"
            if [ "$lint_result" == "success" ] || [ "$lint_result" == "skipped" ]; then
              if [ "$build_result" == "success" ] || [ "$build_result" == "skipped" ]; then
                echo "All required jobs passed or skipped, setting workflow status to success"
                exit 0
              else
                echo "Build job failed, setting workflow status to failure"
                exit 1
              fi
            else
              echo "Lint job failed, setting workflow status to failure"
              exit 1
            fi
          fi
        shell: bash
